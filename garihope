local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")
local Workspace = game:GetService("Workspace")
local LocalPlayer = Players.LocalPlayer
local NoLexosTime = 0 -- Tempo sem LEXOS encontrados
local ServerHopCooldown = 5 -- Tempo máximo sem LEXOS para trocar de servidor

-- Função para trocar de servidor
local function hopServer()
    local placeId = game.PlaceId
    local servers = game:GetService("HttpService"):JSONDecode(game:HttpGetAsync("https://games.roblox.com/v1/games/" .. placeId .. "/servers/Public?sortOrder=Asc&limit=100"))
    for _, server in ipairs(servers.data) do
        if server.playing < server.maxPlayers and server.id ~= game.JobId then
            TeleportService:TeleportToPlaceInstance(placeId, server.id, LocalPlayer)
            break
        end
    end
end

-- Função para encontrar o próximo LEXOS com CanCollide ativo
local function findNextLEXOS()
    for _, lexos in ipairs(Workspace.MapaGeral.Gari.Lixos:GetChildren()) do
        if lexos:IsA("BasePart") and lexos.CanCollide then
            return lexos
        end
    end
    return nil
end

-- Função para monitorar o tempo sem encontrar LEXOS e realizar server hop
local function monitorLexos()
    while true do
        local lexos = findNextLEXOS()
        if not lexos then
            NoLexosTime += task.wait(1) -- Contagem de tempo sem encontrar LEXOS
            if NoLexosTime >= ServerHopCooldown then
                hopServer() -- Troca de servidor após o tempo limite
                break
            end
        else
            NoLexosTime = 0 -- Reseta o contador ao encontrar LEXOS
        end
        task.wait(0.1) -- Intervalo de verificação
    end
end

-- Iniciar o monitoramento
monitorLexos()
